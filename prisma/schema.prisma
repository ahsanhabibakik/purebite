// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  password      String?
  image         String?
  phone         String?
  role          UserRole  @default(CUSTOMER)
  emailVerified DateTime?
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  addresses     Address[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  orders       Order[]
  reviews      Review[]
  wishlist     Wishlist[]
  coupons      UserCoupon[]
  cartItems    CartItem[]
  notifications Notification[]

  @@map("users")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  salePrice   Float?
  image       String
  images      String[]
  category    String
  tags        String[]
  inStock     Boolean  @default(true)
  stockCount  Int      @default(0)
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  embedding   Float[] // Vector embedding for RAG
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems OrderItem[]
  reviews    Review[]
  wishlist   Wishlist[]
  cartItems  CartItem[]

  @@map("products")
}

model Order {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  userId           String      @db.ObjectId
  orderNumber      String      @unique
  status           OrderStatus @default(PENDING)
  total            Float
  subtotal         Float
  tax              Float
  shipping         Float
  discount         Float       @default(0)
  couponId         String?     @db.ObjectId
  paymentStatus    PaymentStatus @default(PENDING)
  paymentMethod    String?
  stripeSessionId  String?
  paymentIntentId  String?
  currency         String      @default("usd")
  trackingNumber   String?
  shippingAddress  Json
  billingAddress   Json?
  isSandbox        Boolean     @default(false)
  estimatedDelivery DateTime?
  deliveredAt      DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  user    User        @relation(fields: [userId], references: [id])
  items   OrderItem[]
  coupon  Coupon?     @relation(fields: [couponId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int
  price     Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  rating    Int
  title     String?
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("wishlist")
}

model BlogPost {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  excerpt     String
  content     String
  image       String
  author      String
  category    String
  tags        String[]
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("blog_posts")
}

// New models for enhanced features
model Address {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  type      AddressType @default(SHIPPING)
  firstName String
  lastName  String
  company   String?
  address1  String
  address2  String?
  city      String
  state     String
  zipCode   String
  country   String
  phone     String?
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("cart_items")
}

model Coupon {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  code           String     @unique
  description    String?
  type           CouponType
  value          Float
  minOrderValue  Float?
  maxUses        Int?
  usedCount      Int        @default(0)
  isActive       Boolean    @default(true)
  validFrom      DateTime
  validUntil     DateTime
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  orders     Order[]
  userCoupons UserCoupon[]

  @@map("coupons")
}

model UserCoupon {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  couponId String @db.ObjectId
  usedAt   DateTime?

  user   User   @relation(fields: [userId], references: [id])
  coupon Coupon @relation(fields: [couponId], references: [id])

  @@unique([userId, couponId])
  @@map("user_coupons")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  parentId    String?  @db.ObjectId
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Category[] @relation("CategoryHierarchy")

  @@map("categories")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Analytics {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  event     String
  userId    String?  @db.ObjectId
  data      Json
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())

  @@map("analytics")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  MODERATOR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum NotificationType {
  ORDER_UPDATE
  PROMOTION
  SYSTEM
  REVIEW_REMINDER
}
