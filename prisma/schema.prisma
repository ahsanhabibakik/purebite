// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  password      String?
  image         String?
  phone         String?
  role          UserRole  @default(CUSTOMER)
  emailVerified DateTime?
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  addresses     Address[]
  resetToken    String?
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  orders       Order[]
  reviews      Review[]
  wishlist     Wishlist[]
  coupons      UserCoupon[]
  cartItems    CartItem[]
  notifications Notification[]
  accounts     Account[]
  sessions     Session[]
  customerChats ChatRoom[] @relation("CustomerChats")
  agentChats   ChatRoom[] @relation("AgentChats")
  sentMessages ChatMessage[] @relation("SentMessages")

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Product {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  price           Float
  salePrice       Float?
  image           String
  images          String[]
  category        String
  tags            String[]
  inStock         Boolean  @default(true)
  stockCount      Int      @default(0)
  lowStockThreshold Int    @default(5)
  reservedStock   Int      @default(0) // Stock reserved for pending orders
  reorderLevel    Int      @default(10)
  isStockTracked  Boolean  @default(true)
  rating          Float    @default(0)
  reviewCount     Int      @default(0)
  embedding       Float[]  // Vector embedding for RAG
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  orderItems      OrderItem[]
  reviews         Review[]
  wishlist        Wishlist[]
  cartItems       CartItem[]
  stockMovements  StockMovement[]

  @@map("products")
}

model Order {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  userId           String      @db.ObjectId
  orderNumber      String      @unique
  status           OrderStatus @default(PENDING)
  total            Float
  subtotal         Float
  tax              Float
  shipping         Float
  discount         Float       @default(0)
  couponId         String?     @db.ObjectId
  paymentStatus    PaymentStatus @default(PENDING)
  paymentMethod    String?
  stripeSessionId  String?
  paymentIntentId  String?
  currency         String      @default("usd")
  trackingNumber   String?
  carrierId        String?     @db.ObjectId
  shippingAddress  Json
  billingAddress   Json?
  isSandbox        Boolean     @default(false)
  estimatedDelivery DateTime?
  deliveredAt      DateTime?
  shippedAt        DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  user    User        @relation(fields: [userId], references: [id])
  items   OrderItem[]
  coupon  Coupon?     @relation(fields: [couponId], references: [id])
  carrier ShippingCarrier? @relation(fields: [carrierId], references: [id])
  tracking OrderTracking?
  statusHistory OrderStatusHistory[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int
  price     Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  rating    Int
  title     String?
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("wishlist")
}

model BlogPost {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  excerpt     String
  content     String
  image       String
  author      String
  category    String
  tags        String[]
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("blog_posts")
}

// New models for enhanced features
model Address {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  type      AddressType @default(SHIPPING)
  firstName String
  lastName  String
  company   String?
  address1  String
  address2  String?
  city      String
  state     String
  zipCode   String
  country   String
  phone     String?
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("cart_items")
}

model Coupon {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  code              String         @unique
  name              String         // Display name for admin
  description       String?
  type              CouponType
  value             Float          // Percentage or fixed amount
  minOrderValue     Float?         // Minimum order amount required
  maxDiscountAmount Float?         // Maximum discount cap for percentage coupons
  maxUses           Int?           // Total usage limit
  maxUsesPerUser    Int?           // Per-user usage limit
  usedCount         Int            @default(0)
  isActive          Boolean        @default(true)
  isPublic          Boolean        @default(false) // Public coupons visible to all
  autoApply         Boolean        @default(false) // Auto-apply if conditions met
  stackable         Boolean        @default(false) // Can be combined with other coupons
  validFrom         DateTime
  validUntil        DateTime
  applicableProducts String[]      @db.ObjectId // Specific products
  excludedProducts   String[]      @db.ObjectId // Excluded products
  applicableCategories String[]    // Product categories
  firstTimeOnly     Boolean        @default(false) // Only for first-time customers
  createdBy         String?        @db.ObjectId   // Admin who created
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  orders     Order[]
  userCoupons UserCoupon[]

  @@map("coupons")
}

model UserCoupon {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  couponId  String   @db.ObjectId
  usedCount Int      @default(0) // Track how many times user used this coupon
  lastUsedAt DateTime?
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  coupon Coupon @relation(fields: [couponId], references: [id])

  @@unique([userId, couponId])
  @@map("user_coupons")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  parentId    String?  @db.ObjectId
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Category[] @relation("CategoryHierarchy")

  @@map("categories")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Analytics {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  event     String
  userId    String?  @db.ObjectId
  data      Json
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())

  @@map("analytics")
}

model NewsletterSubscription {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  isActive      Boolean   @default(true)
  subscribedAt  DateTime  @default(now())
  unsubscribedAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("newsletter_subscriptions")
}

model StockMovement {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  productId   String            @db.ObjectId
  type        StockMovementType
  quantity    Int
  previousStock Int
  newStock    Int
  reason      String?
  reference   String?           // Order ID, adjustment ID, etc.
  userId      String?           @db.ObjectId
  createdAt   DateTime          @default(now())

  product Product @relation(fields: [productId], references: [id])

  @@map("stock_movements")
}

model StockAlert {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  productId   String           @db.ObjectId
  type        StockAlertType
  currentStock Int
  threshold   Int
  isResolved  Boolean          @default(false)
  resolvedAt  DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("stock_alerts")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  MODERATOR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum NotificationType {
  ORDER_UPDATE
  PROMOTION
  SYSTEM
  REVIEW_REMINDER
}

enum StockMovementType {
  PURCHASE        // Stock added from supplier
  SALE           // Stock reduced from sale
  ADJUSTMENT     // Manual stock adjustment
  DAMAGE         // Stock removed due to damage
  RETURN         // Stock added back from return
  RESERVE        // Stock reserved for pending order
  RELEASE        // Reserved stock released
  TRANSFER       // Stock transfer between locations
}

enum StockAlertType {
  LOW_STOCK      // Below low stock threshold
  OUT_OF_STOCK   // Zero stock
  REORDER_POINT  // Below reorder level
}

// Chat support models
model ChatRoom {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  assignedTo  String?     @db.ObjectId  // Admin/support agent ID
  title       String?     // Optional room title
  status      ChatStatus  @default(OPEN)
  priority    ChatPriority @default(NORMAL)
  isArchived  Boolean     @default(false)
  lastMessageAt DateTime  @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user      User         @relation("CustomerChats", fields: [userId], references: [id])
  agent     User?        @relation("AgentChats", fields: [assignedTo], references: [id])
  messages  ChatMessage[]
  
  @@map("chat_rooms")
}

model ChatMessage {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  roomId     String      @db.ObjectId
  senderId   String      @db.ObjectId
  message    String
  messageType ChatMessageType @default(TEXT)
  fileUrl    String?     // For file attachments
  fileName   String?     // Original file name
  fileSize   Int?        // File size in bytes
  isRead     Boolean     @default(false)
  readAt     DateTime?
  editedAt   DateTime?
  createdAt  DateTime    @default(now())

  room     ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender   User     @relation("SentMessages", fields: [senderId], references: [id])

  @@map("chat_messages")
}

model ChatTyping {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  roomId    String   @db.ObjectId
  userId    String   @db.ObjectId
  isTyping  Boolean  @default(true)
  updatedAt DateTime @updatedAt

  @@unique([roomId, userId])
  @@map("chat_typing")
}

enum ChatStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ChatPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ChatMessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

// Order tracking models
model OrderStatusHistory {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String      @db.ObjectId
  status      OrderStatus
  previousStatus OrderStatus?
  description String?
  location    String?     // Current location/facility
  estimatedDelivery DateTime?
  updatedBy   String?     @db.ObjectId  // Admin user who updated
  isVisible   Boolean     @default(true) // Show to customer
  createdAt   DateTime    @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

model ShippingCarrier {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  code        String @unique // e.g., "FEDEX", "UPS", "SUNDARBAN"
  trackingUrl String? // URL template with {trackingNumber} placeholder
  apiUrl      String? // API endpoint for tracking
  apiKey      String? // API key for carrier
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders Order[]
  trackings OrderTracking[]

  @@map("shipping_carriers")
}

model OrderTracking {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String    @unique @db.ObjectId
  trackingNumber  String    @unique
  carrierId       String?   @db.ObjectId
  currentLocation String?
  estimatedDelivery DateTime?
  actualDelivery  DateTime?
  trackingEvents  Json[]    // Array of tracking events from carrier API
  lastUpdated     DateTime  @default(now())
  isDelivered     Boolean   @default(false)
  deliveryProof   String?   // URL to delivery confirmation image
  recipientName   String?
  recipientPhone  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  order   Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  carrier ShippingCarrier? @relation(fields: [carrierId], references: [id])

  @@map("order_tracking")
}

model DeliveryAttempt {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String    @db.ObjectId
  attemptDate DateTime
  status      DeliveryAttemptStatus
  reason      String?   // Reason for failed delivery
  nextAttempt DateTime?
  location    String?
  notes       String?
  driverName  String?
  driverPhone String?
  createdAt   DateTime  @default(now())

  @@map("delivery_attempts")
}

enum DeliveryAttemptStatus {
  ATTEMPTED
  DELIVERED
  FAILED
  RESCHEDULED
}
